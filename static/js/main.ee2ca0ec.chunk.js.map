{"version":3,"sources":["components/FriendCard/friendCard.js","components/Wrapper/wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","clickFriend","Wrapper","children","Title","score","gamePlay","App","state","friends","highScore","clickedFriend","_this","includes","setState","console","log","push","length","i","j","Math","floor","random","_ref","_this2","this","Wrapper_wrapper","components_Title_Title","map","friend","FriendCard_friendCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"msDAoBeA,MAjBf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,GAAIT,EAAMS,GAAIC,QAAS,kBAAMV,EAAMW,YAAYX,EAAMS,QAE/FR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBADF,IAC0BH,EAAMM,gBCL3BM,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCqB1BC,MAtBf,SAAed,GACb,OAECC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,oCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,2BACEF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAAA,gEAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMe,OAEhBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,4CAC4CJ,EAAMgB,mBCsDvCC,6MA9DbC,MAAQ,CACNC,UACAJ,MAAO,EACPK,UAAW,EACXC,cAAe,GACfL,SAAU,MAIZL,YAAc,SAAAF,GAEZ,IAAIY,EAAgBC,EAAKJ,MAAMG,cAE/B,GAAGA,EAAcE,SAASd,GAGxB,OAFAa,EAAKE,SAAS,CAACH,cAAe,GAAIN,MAAO,EAAGC,SAAW,oBACvDS,QAAQC,IAAI,YAMZ,GAFAL,EAAcM,KAAKlB,GAES,IAAzBY,EAAcO,OAGf,OAFAN,EAAKE,SAAS,CAACH,cAAe,GAAIN,MAAO,EAAGC,SAAW,mBACvDS,QAAQC,IAAI,WAIdJ,EAAKE,SAAS,CAACL,UAASE,gBAAeN,MAAOM,EAAcO,OAAQZ,SAAU,KAE9E,IAAK,IAAIa,EAAIV,EAAQS,OAAS,EAAGC,EAAI,EAAGA,IAAK,CAC3C,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADGK,EAEf,CAACf,EAAQW,GAAKX,EAAQU,IAAjDV,EAAQU,GAFkCK,EAAA,GAE7Bf,EAAQW,GAFqBI,EAAA,6EAQxC,IAAAC,EAAAC,KACP,OAIInC,EAAAC,EAAAC,cAACkC,EAAD,KACEpC,EAAAC,EAAAC,cAACmC,EAAD,CACAvB,MAAOqB,KAAKlB,MAAMH,MAClBC,SAAUoB,KAAKlB,MAAMF,WAClBoB,KAAKlB,MAAMC,QAAQoB,IAAI,SAAAC,GAAM,OAC5BvC,EAAAC,EAAAC,cAACsC,EAAD,CACE9B,YAAawB,EAAKxB,YAClBF,GAAI+B,EAAO/B,GACXiC,IAAKF,EAAO/B,GACZH,KAAMkC,EAAOlC,KACbE,MAAOgC,EAAOhC,kBAtDZmC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ee2ca0ec.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./friendCard.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} id={props.id} onClick={() => props.clickFriend(props.id)}/>\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./wrapper.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Title.css\";\n\nfunction Title(props) {\n  return (\n\n   <div className=\"header\">\n    <div className=\"title\">Click Game with Avenger Friends!</div>\n    <div className=\"Introduction\">  \n      <ul>Instructions:</ul>\n        <li>Click on an Avenger to score points</li>\n        <li>If you score 6 points, you win!</li>\n        <li>If you click on the same Avenger twice, you lose!</li>\n    </div>\n    <div className=\"scores\">\n      Score: {props.score}\n    </div>\n    <div className=\"gamePlay\">\n      Game Status: Click on an Avenger Friend! {props.gamePlay}\n    </div>\n  </div>\n   \n  )\n}\n\nexport default Title;\n","import React from 'react';\nimport './App.css';\nimport FriendCard from \"./components/FriendCard/friendCard.js\";\nimport Wrapper from \"./components/Wrapper/wrapper.js\";\nimport Title from \"./components/Title/Title.js\";\nimport friends from \"./friends.json\";\n\n\nclass App extends React.Component {\n\n  state = {\n    friends,\n    score: 0,\n    highScore: 6,\n    clickedFriend: [],\n    gamePlay: \"\",\n  }\n\n\n  clickFriend = id => {\n\n    let clickedFriend = this.state.clickedFriend;\n\n    if(clickedFriend.includes(id)){\n      this.setState({clickedFriend: [], score: 0, gamePlay:  \"You lost!!\"});\n      console.log(\"You Lost\")\n      return;\n    }\n    else{\n      clickedFriend.push(id)\n\n      if(clickedFriend.length === 6){\n        this.setState({clickedFriend: [], score: 6, gamePlay:  \"You won!!\"});\n        console.log(\"You Win\");\n        return;\n      }\n\n      this.setState({friends, clickedFriend, score: clickedFriend.length, gamePlay: \"\"});\n\n      for (let i = friends.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [friends[i],  friends[j]] = [friends[j],  friends[i]];\n      }\n    }\n\n  }\n\n  render() {\n    return (\n\n\n      \n        <Wrapper> \n          <Title\n          score={this.state.score}\n          gamePlay={this.state.gamePlay}/>      \n            {this.state.friends.map(friend => (\n              <FriendCard\n                clickFriend={this.clickFriend}\n                id={friend.id}\n                key={friend.id}  \n                name={friend.name}\n                image={friend.image}                      \n              />\n            ))}\n          </Wrapper>\n\n          \n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}